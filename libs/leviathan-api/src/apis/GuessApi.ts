/* tslint:disable */
/* eslint-disable */
/**
 * leviathan
 * lolprodle API server
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CheckGuessRequest,
  CheckGuessResponse,
  ErrorResponse,
  PreviousPlayerResponse,
  ResetTimeResponse,
} from '../models';
import {
    CheckGuessRequestFromJSON,
    CheckGuessRequestToJSON,
    CheckGuessResponseFromJSON,
    CheckGuessResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PreviousPlayerResponseFromJSON,
    PreviousPlayerResponseToJSON,
    ResetTimeResponseFromJSON,
    ResetTimeResponseToJSON,
} from '../models';

export interface CheckGuessOperationRequest {
    checkGuessRequest: CheckGuessRequest;
}

export interface PlayersRequest {
    region: string;
}

export interface PreviousPlayerRequest {
    region: string;
}

/**
 * 
 */
export class GuessApi extends runtime.BaseAPI {

    /**
     */
    async checkGuessRaw(requestParameters: CheckGuessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckGuessResponse>> {
        if (requestParameters.checkGuessRequest === null || requestParameters.checkGuessRequest === undefined) {
            throw new runtime.RequiredError('checkGuessRequest','Required parameter requestParameters.checkGuessRequest was null or undefined when calling checkGuess.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/check_guess`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckGuessRequestToJSON(requestParameters.checkGuessRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckGuessResponseFromJSON(jsonValue));
    }

    /**
     */
    async checkGuess(requestParameters: CheckGuessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckGuessResponse> {
        const response = await this.checkGuessRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async indexRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async index(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.indexRaw(initOverrides);
    }

    /**
     */
    async playersRaw(requestParameters: PlayersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.region === null || requestParameters.region === undefined) {
            throw new runtime.RequiredError('region','Required parameter requestParameters.region was null or undefined when calling players.');
        }

        const queryParameters: any = {};

        if (requestParameters.region !== undefined) {
            queryParameters['region'] = requestParameters.region;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/players`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async players(requestParameters: PlayersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.playersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async previousPlayerRaw(requestParameters: PreviousPlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PreviousPlayerResponse>> {
        if (requestParameters.region === null || requestParameters.region === undefined) {
            throw new runtime.RequiredError('region','Required parameter requestParameters.region was null or undefined when calling previousPlayer.');
        }

        const queryParameters: any = {};

        if (requestParameters.region !== undefined) {
            queryParameters['region'] = requestParameters.region;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/previous_player`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PreviousPlayerResponseFromJSON(jsonValue));
    }

    /**
     */
    async previousPlayer(requestParameters: PreviousPlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PreviousPlayerResponse> {
        const response = await this.previousPlayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async resetTimeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResetTimeResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/reset_time`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResetTimeResponseFromJSON(jsonValue));
    }

    /**
     */
    async resetTime(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResetTimeResponse> {
        const response = await this.resetTimeRaw(initOverrides);
        return await response.value();
    }

}
